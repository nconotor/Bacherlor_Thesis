[General]	
# Simulationszeit
sim-time-limit = 100.0s
seed-set = ${1,2,3,4,5}

# Netzwerkname
network = TuCsNet

#
# Setzen der Pfade für die Ergebnisse. Ordner benötigt Platz für mehrer 100 Gigabyte
#
output-vector-file = /mnt/e/Results/${configname}-${runnumber}.vec
output-scalar-file = /mnt/e/Results/${configname}-${runnumber}.sca
eventlog-file =  /mnt/e/Results/${configname}-${runnumber}.elog

#
# Verfeinerung der aufgezeichneten Daten 
#
cmdenv-express-mode = true
**.result-recording-modes = all
**.ls*Host**.vector-recording=false
**.serverRouter**.scalar-recording=false
**.serverRouter**.vector-recording=false
**.eve**.vector-recording=false
**.eve**.scalar-recording=false
**.aliceServer**.scalar-recording=false
**.aliceServer**.vector-recording=false
**.switchAlice**.vector-recording=false
**.switchAlice**.scalar-recording=false
**.encap.vector-recording=false 
**.queue**.vector-recording=false
**.queue**.scalar-recording=false
**.lo**.vector-recording=false
**.lo**.recording=false
**.studentHost**.vector-recording=false
**.irbServer[1..].tcp**.vector-recording=false
**.irbServer[1..].udp**.vector-recording=false
# record-eventlog = true

#
# Konfigurationen für die Nodes
#
[Config NodeConfig]
#
# Adresskonfiguration
#
*.configurator.config = xmldoc("ipconfig.xml")

#
# Internet Konfiguration
#
**.internet.networkLayer.delayer.config = xmldoc("internetCloud.xml")

# EthernetInterface/ Messen des Datenverkehrs
**.numOutputHooks = 1
**.numInputHooks = 1
**.outputHook[*].typename = "ThruputMeter"
**.inputHook[*].typename = "ThruputMeter"
**.queueType = "DropTailQueue"

#
# ARP Konfiguration
#
**.arp.retryTimeout = 1s
**.arp.retryCount = 3
**.arp.cacheTimeout = 180s

#
# TCP Einstellungen
# 
**.tcp.delayedAcksEnabled = true
**.tcp.nagleEnabled = true
**.tcp.limitedTransmitEnabled = true
**.tcp.increasedIWEnabled = true
#**.tcp.sackSupport = true
**.tcp.windowScalingSupport = true
**.tcp.timestampSupport = true
**.tcp.tcpAlgorithmClass = "TCPNewReno"

#
# Globale TCP App Konfig
#
**.tcpApp[*].numRequestsPerSession = min(10, truncnormal(1, 2) )
**.tcpApp[*].idleInterval = min(100ms, truncnormal(10ms, 50ms) )
**.tcpApp[*].thinkTime = min(2s, truncnormal(10ms, 250ms))
**.tcpApp[*].dataTransferMode = "object"

#
# Konfiguration der Clients
#
[Config ClientConfig]
# TCP Einstellung für die Clienten
**.*Host[*].numTcpApps = 2
**.*Host[*].tcpApp[*].typename = "TCPBasicClientApp"
**.*Host[*].tcpApp[0].connectAddress = choose(intuniform(0,9), moduleListByPath("**.aliceServer[*]"))  
**.*Host[*].tcpApp[1].connectAddress = choose(intuniform(0,9), moduleListByPath("**.irbServer[*]"))  
**.*Host[*].tcpApp[*].connectPort = intuniform(80,93)
**.*Host[*].tcpApp[0].startTime = uniform(0s,75s)
**.*Host[*].tcpApp[1].startTime = uniform(0s,100s)


# Konfiguration für alle TCP Verbindungen
**.*Host[*].tcpApp[0].requestLength = min(1MiB, 20B + truncnormal(500B, 500B))
**.*Host[*].tcpApp[0].replyLength = min(16MiB, 20B + truncnormal(2MiB, 2MiB))
**.*Host[*].tcpApp[1].requestLength = min(16MiB, 20B + truncnormal(2MiB, 2MiB)) 
**.*Host[*].tcpApp[1].replyLength = min(16MiB, 20B + truncnormal(2MiB, 2MiB))



# Videostream Clienten
**.*Host[*].numUdpApps = 2
**.*Host[*].udpApp[1].typename = "UDPVideoStreamCli"
**.*Host[*].udpApp[1].serverAddress = choose(intuniform(0,18), moduleListByPath("**.*Server[*]"))
**.*Host[*].udpApp[1].serverPort = intuniform(8080,8085)
**.*Host[*].udpApp[1].startTime = uniform(0s,90s)


# UDP Traffic
**.*Host[*].udpApp[0].typename = "UDPBasicApp"
**.*Host[*].udpApp[0].destAddresses = choose(intuniform(0,18), moduleListByPath("**.*Server[*]")) 
**.*Host[*].udpApp[0].destPort = intuniform(9080,9085)
**.*Host[*].udpApp[0].messageLength = min(508B, 8B + truncnormal(256B, 64B))
**.*Host[*].udpApp[0].sendInterval = min(100ms, truncnormal(50ms, 50ms))
**.*Host[*].udpApp[0].startTime = uniform(0s,1s)


# Ping App
**.*Host[*9].numPingApps = 1
**.*Host[*9].pingApp[0].destAddr = choose(intuniform(0,9), moduleListByPath("**.irbServer[*]")) 
**.*Host[*8].numPingApps = 1
**.*Host[*8].pingApp[0].destAddr = choose(intuniform(0,9), moduleListByPath("**.aliceServer[*]")) 
**.*Host[*].pingApp[0].sendInterval = 1s
**.*Host[*].pingApp[0].startTime = exponential(1s)
**.*Host[*].pingApp[0].stopTime = 100s

#
# Konfiguration der *Server
#
[Config ServerConfig]
#
# Eve Einstellung. Benötigt eine TCP-App um Pakete mit SEA zu verschicken
#
**.eve.numTcpApps = 1
**.eve.tcpApp[0].typename = "TCPGenericSrvApp"
**.*eve.tcpApp[0].localPort = 80

#
# TCP Einstellungen
#
**.irbServer[*].numTcpApps = 30
**.aliceServer[*].numTcpApps = 50
**.*Server[*].tcpApp[0..12].typename = "TCPGenericSrvApp"
**.*Server[*].tcpApp[13..].typename = "TCPBasicClientApp"
**.*Server[*].tcpApp[0].localPort = 80
**.*Server[*].tcpApp[1].localPort = 81
**.*Server[*].tcpApp[2].localPort = 82
**.*Server[*].tcpApp[3].localPort = 83
**.*Server[*].tcpApp[4].localPort = 84
**.*Server[*].tcpApp[5].localPort = 85
**.*Server[*].tcpApp[6].localPort = 86
**.*Server[*].tcpApp[7].localPort = 87
**.*Server[*].tcpApp[8].localPort = 88
**.*Server[*].tcpApp[9].localPort = 90
**.*Server[*].tcpApp[10].localPort = 91
**.*Server[*].tcpApp[11].localPort = 92
**.*Server[*].tcpApp[12].localPort = 93

# Schickt HTTP Nachrichten an die IrbServer
**.aliceServer[*].tcpApp[*].connectAddress = choose(intuniform(0,9), moduleListByPath("**.irbServer[*]")) 
**.irbServer[*].tcpApp[*].connectAddress = choose(intuniform(0,9), moduleListByPath("**.aliceServer[*]")) 
**.*Server[*].tcpApp[*].connectPort = intuniform(80,93)
**.*Server[*].requestLength = min(1MiB, 20B + truncnormal(500B, 500B))
**.*Server[*].replyLength = min(16MiB, 20B + truncnormal(2MiB, 2MiB))
**.*Server[*].tcpApp[*].startTime = uniform(0s,90s)

#
# UDP Einstellungen
#
**.irbServer[*].numUdpApps = 20
**.aliceServer[*].numUdpApps = 50
**.*Server[*].udpApp[0..5].typename = "UDPVideoStreamSvr"
**.*Server[*].udpApp[0].localPort = 8080
**.*Server[*].udpApp[1].localPort = 8081
**.*Server[*].udpApp[2].localPort = 8082
**.*Server[*].udpApp[3].localPort = 8083
**.*Server[*].udpApp[4].localPort = 8084
**.*Server[*].udpApp[5].localPort = 8085
**.*Server[*].udpApp[0].videoSize = 4MiB  
**.*Server[*].udpApp[1].videoSize = 8MiB 
**.*Server[*].udpApp[2].videoSize = 16MiB 
**.*Server[*].udpApp[3].videoSize = 32MiB 
**.*Server[*].udpApp[4].videoSize = 64MiB
**.*Server[*].udpApp[5].videoSize = 128MiB
**.*Server[*].udpApp[0..5].sendInterval = min(100ms, truncnormal(50ms, 50ms))
**.*Server[*].udpApp[0..5].packetLen = min(508B, 128B + truncnormal(256B, 64B))

#
# UDP Echo Apps
#
**.*Server[*].udpApp[6..11].typename = "UDPEchoApp"
**.*Server[*].udpApp[6].localPort = 9080
**.*Server[*].udpApp[7].localPort = 9081
**.*Server[*].udpApp[8].localPort = 9082
**.*Server[*].udpApp[9].localPort = 9083
**.*Server[*].udpApp[10].localPort = 9084
**.*Server[*].udpApp[11].localPort = 9085

# Empfangen Videopakete von den irbServern
**.*Server[*].udpApp[*].typename = "UDPVideoStreamCli"
**.aliceServer[*].udpApp[*].serverAddress = choose(intuniform(0,9), moduleListByPath("**.irbServer[*]"))  
**.irbServer[*].udpApp[*].serverAddress = choose(intuniform(0,9), moduleListByPath("**.aliceServer[*]"))  
**.*Server[*].udpApp[*].serverPort = intuniform(8080,8085)
**.*Server[*].udpApp[*].startTime = uniform(0s,90s)

#
# Test SACK
#
[Config KeinAngriffSackCrash]
extends = KeinAngriff
**.hostCount = 0
**.studentCount = 0
**.tcp.delayedAcksEnabled = true
**.tcp.nagleEnabled = true
**.tcp.limitedTransmitEnabled = true
**.tcp.increasedIWEnabled = true
**.tcp.sackSupport = true
**.tcp.windowScalingSupport = true
**.tcp.timestampSupport = true
**.tcp.tcpAlgorithmClass = "TCPNewReno"

#
# Lädt die Konfiguration bei keinem Angriff
#
[Config KeinAngriff]
extends = NodeConfig, ServerConfig, ClientConfig
description = "Simulation ohne Angriff"

#
# Lädt die Konfiguration bei keinem Angriff
#
[Config KeinAngriff1]
extends = NodeConfig, ServerConfig, ClientConfig
description = "Simulation ohne Angriff"

#
# Lädt die Konfiguration bei keinem Angriff
#
[Config KeinAngriff2]
extends = NodeConfig, ServerConfig, ClientConfig
description = "Simulation ohne Angriff"
seed-set = 1

#
# Konfigurationen für die DDoS Angriffe
#
[Config DDOSAngriffSmall]
extends = KeinAngriff
description = "Sendet einige Pakete an Server 1"
**.attackConfigurationFile = "attacks/ddosSmall.xml"
sim-time-limit = 50.0s

[Config DDOSAngriffSmallDisable]
extends = KeinAngriff
description = "Deaktiviert den Server 1 nach einem intensiven Angriff."
**.attackConfigurationFile = "attacks/ddosSmallDisable.xml"
sim-time-limit = 50.0s


[Config DDOSAngriffMedium]
extends = KeinAngriff
description = "Sendet viele Pakete an Server 1"
**.attackConfigurationFile = "attacks/ddosMedium.xml"
sim-time-limit = 50.0s

[Config DDOSAngriffMediumDisable]
extends = KeinAngriff
description = "Deaktiviert den Server 1 nach einem intensiven Angriff."
**.attackConfigurationFile = "attacks/ddosMediumDisable.xml"
sim-time-limit = 50.0s


[Config DDOSAngriffLarge]
extends = KeinAngriff
description = "Sendet sehr viele Pakete an Server 1"
**.attackConfigurationFile = "attacks/ddosLarge.xml"
sim-time-limit = 50.0s


[Config DDOSAngriffLargeDisable]
extends = KeinAngriff
description = "Deaktiviert den Server 1 nach einem intensiven Angriff."
**.attackConfigurationFile = "attacks/ddosLargeDisable.xml"
sim-time-limit = 50.0s


#
# Konfigurationen für die ARP Angriffe
#
[Config ARPAngriffServer]
extends = KeinAngriff
description = "Sendet modifizierte ARP Pakete"
**.attackConfigurationFile = "attacks/arpServer.xml"

[Config ARPAngriffServerLate]
extends = KeinAngriff
description = "Sendet modifizierte ARP Pakete"
**.attackConfigurationFile = "attacks/arpServerLate.xml"

[Config ARPAngriffStudent]
extends = KeinAngriff
description = "Sendet modifizierte ARP Pakete"
**.attackConfigurationFile = "attacks/arpStudent.xml"
**.studentHost**.vector-recording=true

#
# Konfiguration für den Port Scan Angriff
#
[Config PortScannerPassive]
extends = KeinAngriff
description = "Sendet TCP Ack Pakete"
**.attackConfigurationFile = "attacks/portPassive.xml"
